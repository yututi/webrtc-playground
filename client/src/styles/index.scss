@import "~styles/media.scss";

body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "メイリオ", "Ubuntu", "Cantarell", "Fira Sans",
        "Droid Sans", "Helvetica Neue", sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: var(--background);
    color: var(--on-background);
}

* {
    box-sizing: border-box;
}

:root {
    --background: #ebebeb;
    --on-background: white;
    --primary: #ec821f;
    --on-primary: #ffffff;
    --secondary: #495883;
    --on-secondary: #ffffff;
    --surface: #fffbef;
    --on-surface: #333333;
    --error: #e6503d;
    --on-error: #ffffff;
    --mf: #999999;
    --header-height: 60px;
    --component-color: var(--primary);
    --on-component-color: var(--on-primary);
}

html,
body,
#root {
    height: 100%;
}

.component {
    background-color: var(--surface);
    color: var(--on-surface);
}

.main {
    height: 100%;
    max-height: 100%;
    overflow: hidden;
}
.body {
    display: flex;
    height: 0;
    position: relative;
    &__content {
        margin: 0px auto;
        max-width: 1200px;
        width: 100%;
        height: 100%;
        overflow: auto;
    }
}
/** TODO もうちょっと整理 */
@media only screen and (max-width: 1800px) and (min-width: 599px) {
    .body--has-left-nav {
        .body__content {
            margin-left: var(--nav-width);
            width: 100%;
        }
    }
    .body--has-right-nav {
        .body__content {
            margin-right: var(--nav-width);
            width: 100%;
        }
    }
}

.spacer {
    flex: 1;
}

.flex {
    display: flex;

    &.is-vertical {
        flex-direction: column;
    }
    &.is-align-center {
        align-items: center;
    }
    &.is-justify-center {
        justify-content: center;
    }
}

.flex-item--grow {
    flex: 1;
}

.action-btns {
    display: flex;
    justify-content: flex-end;

    & > *:not(:first-child) {
        margin-left: 6px;
    }
}

.mt-1 {
    margin-top: 1em;
}

.ml-1 {
    margin-left: 1em;
}

.hide-on-sp {
    @include sp {
        display: none !important;
    }
}

.hide-on-pc {
    @include pc {
        display: none !important;
    }
}


.hl {
	position: relative;
}
.hl::before {
	position: absolute;
	content: "";
	pointer-events: none;
	top: 0px;
	left: 0px;
	right: 0px;
	bottom: 0px;
	border-radius: inherit;
	opacity: 0;
	background-color: currentColor;
	transition: opacity 0.2s;
}
.hl:hover::before {
	opacity: 0.15;
}
.hl:active::before,
.hl:focus::before {
	opacity: 0.2;
}

.primary {
    --component-color: var(--primary);
    --on-component-color: var(--on-primary);
}
.secondary {
    --component-color: var(--secondary);
    --on-component-color: var(--on-secondary);
}
.white {
    --component-color: white;
    --on-component-color: transparent;
}

/* TODO: あとでコンポーネント化 */
input[type="text"] {
    padding: 6px;
    outline: none;
    border: 2px solid var(--mf);
    border-radius: 4px;
    transition: border-color 0.3s;
}
input[type="text"]:focus {
    border-color: var(--component-color);
}

.form.checked input[type="text"]:invalid {
    border-color: var(--error);
}
button {
    // border: 1px solid var(--component-color);
    border: none;
    background-color: var(--component-color);
    color: var(--on-component-color);
    padding: 6px;
    border-radius: 4px;
    cursor: pointer;
    outline: none;
}
button.is-error {
    border: 1px solid var(--error);
    background-color: var(--error);
    color: var(--on-error);
}

select {
    padding: 4px;
    background-color: transparent;
    border-radius: 999px;
    border: 1px solid var(--primary);
    outline: none;
    color: var(--primary);
}